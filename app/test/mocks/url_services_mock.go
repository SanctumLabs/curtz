// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal/core/contracts/url_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/sanctumlabs/curtz/app/internal/core/entities"
)

// MockUrlService is a mock of UrlService interface.
type MockUrlService struct {
	ctrl     *gomock.Controller
	recorder *MockUrlServiceMockRecorder
}

// MockUrlServiceMockRecorder is the mock recorder for MockUrlService.
type MockUrlServiceMockRecorder struct {
	mock *MockUrlService
}

// NewMockUrlService creates a new mock instance.
func NewMockUrlService(ctrl *gomock.Controller) *MockUrlService {
	mock := &MockUrlService{ctrl: ctrl}
	mock.recorder = &MockUrlServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlService) EXPECT() *MockUrlServiceMockRecorder {
	return m.recorder
}

// LookupUrl mocks base method.
func (m *MockUrlService) LookupUrl(shortCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUrl", shortCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupUrl indicates an expected call of LookupUrl.
func (mr *MockUrlServiceMockRecorder) LookupUrl(shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUrl", reflect.TypeOf((*MockUrlService)(nil).LookupUrl), shortCode)
}

// MockUrlReadService is a mock of UrlReadService interface.
type MockUrlReadService struct {
	ctrl     *gomock.Controller
	recorder *MockUrlReadServiceMockRecorder
}

// MockUrlReadServiceMockRecorder is the mock recorder for MockUrlReadService.
type MockUrlReadServiceMockRecorder struct {
	mock *MockUrlReadService
}

// NewMockUrlReadService creates a new mock instance.
func NewMockUrlReadService(ctrl *gomock.Controller) *MockUrlReadService {
	mock := &MockUrlReadService{ctrl: ctrl}
	mock.recorder = &MockUrlReadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlReadService) EXPECT() *MockUrlReadServiceMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockUrlReadService) GetById(id string) (entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUrlReadServiceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUrlReadService)(nil).GetById), id)
}

// GetByKeyword mocks base method.
func (m *MockUrlReadService) GetByKeyword(keyword string) ([]entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeyword", keyword)
	ret0, _ := ret[0].([]entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeyword indicates an expected call of GetByKeyword.
func (mr *MockUrlReadServiceMockRecorder) GetByKeyword(keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeyword", reflect.TypeOf((*MockUrlReadService)(nil).GetByKeyword), keyword)
}

// GetByKeywords mocks base method.
func (m *MockUrlReadService) GetByKeywords(keywords []string) ([]entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeywords", keywords)
	ret0, _ := ret[0].([]entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeywords indicates an expected call of GetByKeywords.
func (mr *MockUrlReadServiceMockRecorder) GetByKeywords(keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeywords", reflect.TypeOf((*MockUrlReadService)(nil).GetByKeywords), keywords)
}

// GetByOriginalUrl mocks base method.
func (m *MockUrlReadService) GetByOriginalUrl(originalUrl string) (entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalUrl", originalUrl)
	ret0, _ := ret[0].(entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalUrl indicates an expected call of GetByOriginalUrl.
func (mr *MockUrlReadServiceMockRecorder) GetByOriginalUrl(originalUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalUrl", reflect.TypeOf((*MockUrlReadService)(nil).GetByOriginalUrl), originalUrl)
}

// GetByShortCode mocks base method.
func (m *MockUrlReadService) GetByShortCode(shortCode string) (entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortCode", shortCode)
	ret0, _ := ret[0].(entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortCode indicates an expected call of GetByShortCode.
func (mr *MockUrlReadServiceMockRecorder) GetByShortCode(shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortCode", reflect.TypeOf((*MockUrlReadService)(nil).GetByShortCode), shortCode)
}

// GetByUserId mocks base method.
func (m *MockUrlReadService) GetByUserId(userID string) ([]entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userID)
	ret0, _ := ret[0].([]entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockUrlReadServiceMockRecorder) GetByUserId(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockUrlReadService)(nil).GetByUserId), userID)
}

// MockUrlWriteService is a mock of UrlWriteService interface.
type MockUrlWriteService struct {
	ctrl     *gomock.Controller
	recorder *MockUrlWriteServiceMockRecorder
}

// MockUrlWriteServiceMockRecorder is the mock recorder for MockUrlWriteService.
type MockUrlWriteServiceMockRecorder struct {
	mock *MockUrlWriteService
}

// NewMockUrlWriteService creates a new mock instance.
func NewMockUrlWriteService(ctrl *gomock.Controller) *MockUrlWriteService {
	mock := &MockUrlWriteService{ctrl: ctrl}
	mock.recorder = &MockUrlWriteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlWriteService) EXPECT() *MockUrlWriteServiceMockRecorder {
	return m.recorder
}

// CreateUrl mocks base method.
func (m *MockUrlWriteService) CreateUrl(userID, originalUrl, customAlias string, expiresOn time.Time, keywords []string) (entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUrl", userID, originalUrl, customAlias, expiresOn, keywords)
	ret0, _ := ret[0].(entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUrl indicates an expected call of CreateUrl.
func (mr *MockUrlWriteServiceMockRecorder) CreateUrl(userID, originalUrl, customAlias, expiresOn, keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUrl", reflect.TypeOf((*MockUrlWriteService)(nil).CreateUrl), userID, originalUrl, customAlias, expiresOn, keywords)
}

// Remove mocks base method.
func (m *MockUrlWriteService) Remove(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockUrlWriteServiceMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUrlWriteService)(nil).Remove), id)
}
