// Code generated by MockGen. DO NOT EDIT.
// Source: app/pkg/jwt/jwt.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockJwtGen is a mock of JwtGen interface.
type MockJwtGen struct {
	ctrl     *gomock.Controller
	recorder *MockJwtGenMockRecorder
}

// MockJwtGenMockRecorder is the mock recorder for MockJwtGen.
type MockJwtGenMockRecorder struct {
	mock *MockJwtGen
}

// NewMockJwtGen creates a new mock instance.
func NewMockJwtGen(ctrl *gomock.Controller) *MockJwtGen {
	mock := &MockJwtGen{ctrl: ctrl}
	mock.recorder = &MockJwtGenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtGen) EXPECT() *MockJwtGenMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockJwtGen) Decode(tokenString, issuer, signingKey string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", tokenString, issuer, signingKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Decode indicates an expected call of Decode.
func (mr *MockJwtGenMockRecorder) Decode(tokenString, issuer, signingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockJwtGen)(nil).Decode), tokenString, issuer, signingKey)
}

// Encode mocks base method.
func (m *MockJwtGen) Encode(uid, signingKey, issuer string, expireDelta int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", uid, signingKey, issuer, expireDelta)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockJwtGenMockRecorder) Encode(uid, signingKey, issuer, expireDelta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockJwtGen)(nil).Encode), uid, signingKey, issuer, expireDelta)
}

// EncodeRefreshToken mocks base method.
func (m *MockJwtGen) EncodeRefreshToken(uid, signingKey, issuer string, expireDelta int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeRefreshToken", uid, signingKey, issuer, expireDelta)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeRefreshToken indicates an expected call of EncodeRefreshToken.
func (mr *MockJwtGenMockRecorder) EncodeRefreshToken(uid, signingKey, issuer, expireDelta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeRefreshToken", reflect.TypeOf((*MockJwtGen)(nil).EncodeRefreshToken), uid, signingKey, issuer, expireDelta)
}
