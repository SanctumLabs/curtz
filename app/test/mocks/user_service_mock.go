// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal/core/contracts/user_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/sanctumlabs/curtz/app/internal/core/entities"
	identifier "github.com/sanctumlabs/curtz/app/pkg/identifier"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(email, password string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, password)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), email, password)
}

// GetByVerificationToken mocks base method.
func (m *MockUserService) GetByVerificationToken(verificationToken string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByVerificationToken", verificationToken)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByVerificationToken indicates an expected call of GetByVerificationToken.
func (mr *MockUserServiceMockRecorder) GetByVerificationToken(verificationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByVerificationToken", reflect.TypeOf((*MockUserService)(nil).GetByVerificationToken), verificationToken)
}

// GetUserByEmail mocks base method.
func (m *MockUserService) GetUserByEmail(email string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserServiceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserService)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(id string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), id)
}

// RemoveUser mocks base method.
func (m *MockUserService) RemoveUser(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUserServiceMockRecorder) RemoveUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUserService)(nil).RemoveUser), id)
}

// SetVerified mocks base method.
func (m *MockUserService) SetVerified(id identifier.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVerified", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVerified indicates an expected call of SetVerified.
func (mr *MockUserServiceMockRecorder) SetVerified(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerified", reflect.TypeOf((*MockUserService)(nil).SetVerified), id)
}

// MockUserReadService is a mock of UserReadService interface.
type MockUserReadService struct {
	ctrl     *gomock.Controller
	recorder *MockUserReadServiceMockRecorder
}

// MockUserReadServiceMockRecorder is the mock recorder for MockUserReadService.
type MockUserReadServiceMockRecorder struct {
	mock *MockUserReadService
}

// NewMockUserReadService creates a new mock instance.
func NewMockUserReadService(ctrl *gomock.Controller) *MockUserReadService {
	mock := &MockUserReadService{ctrl: ctrl}
	mock.recorder = &MockUserReadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReadService) EXPECT() *MockUserReadServiceMockRecorder {
	return m.recorder
}

// GetByVerificationToken mocks base method.
func (m *MockUserReadService) GetByVerificationToken(verificationToken string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByVerificationToken", verificationToken)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByVerificationToken indicates an expected call of GetByVerificationToken.
func (mr *MockUserReadServiceMockRecorder) GetByVerificationToken(verificationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByVerificationToken", reflect.TypeOf((*MockUserReadService)(nil).GetByVerificationToken), verificationToken)
}

// GetUserByEmail mocks base method.
func (m *MockUserReadService) GetUserByEmail(email string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserReadServiceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserReadService)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockUserReadService) GetUserByID(id string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserReadServiceMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserReadService)(nil).GetUserByID), id)
}

// MockUserWriteService is a mock of UserWriteService interface.
type MockUserWriteService struct {
	ctrl     *gomock.Controller
	recorder *MockUserWriteServiceMockRecorder
}

// MockUserWriteServiceMockRecorder is the mock recorder for MockUserWriteService.
type MockUserWriteServiceMockRecorder struct {
	mock *MockUserWriteService
}

// NewMockUserWriteService creates a new mock instance.
func NewMockUserWriteService(ctrl *gomock.Controller) *MockUserWriteService {
	mock := &MockUserWriteService{ctrl: ctrl}
	mock.recorder = &MockUserWriteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserWriteService) EXPECT() *MockUserWriteServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserWriteService) CreateUser(email, password string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, password)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserWriteServiceMockRecorder) CreateUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserWriteService)(nil).CreateUser), email, password)
}

// RemoveUser mocks base method.
func (m *MockUserWriteService) RemoveUser(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUserWriteServiceMockRecorder) RemoveUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUserWriteService)(nil).RemoveUser), id)
}

// SetVerified mocks base method.
func (m *MockUserWriteService) SetVerified(id identifier.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVerified", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVerified indicates an expected call of SetVerified.
func (mr *MockUserWriteServiceMockRecorder) SetVerified(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerified", reflect.TypeOf((*MockUserWriteService)(nil).SetVerified), id)
}
