// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/register": {
          "post": {
            "description": "Register a new user account",
            "summary": "Registers a new user account",
            "operationId": "registerUser",
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "tags": [
              "auth"
            ],
            "parameters": [
              {
                "description": "new user",
                "name": "user",
                "in": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/auth.registerRequestDto"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successfully created user",
                "schema": {
                  "$ref": "#/definitions/auth.userResponseDto"
                }
              },

              "422": {
                "description": "Unprocessible entity",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              },

              "400": {
                "description": "Bad Request",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              }                            
            }
          }
        },
        "/auth/login": {
          "post": {
            "description": "Login into an already registered user account",
            "summary": "Logs in a user into a registered account",
            "operationId" : "loginUser",
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "tags": [
              "auth"
            ],
            "parameters": [
              {
                "description": "registered user",
                "name": "user",
                "in": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/auth.registerRequestDto"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Successfully logged in user",
                "schema": {
                  "$ref": "#/definitions/auth.userResponseDto"
                }
              },
              "400": {
                "description": "Bad Request",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              },
              "401": {
                "description": "Unauthorized request",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              },
              "422": {
                "description": "Unprocessable entity",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              }
            }
          }
        },
        "/auth/oauth/token": {
          "post": {
            "description": "Used by clients to refresh expired access tokens from valid refresh tokens",
            "summary": "Used to get a new access token given a valid refresh token",
            "operationId": "oauthToken",
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "tags": [
              "auth"
            ],
            "parameters": [
              {
                "in": "query",
                "description": "grant type to use, required value is refresh_token",
                "name": "grant_type",
                "required": true,
                "type": "string",
                "enum": [
                  "refresh_token"
                ]
              },
              {
                "in": "query",
                "name": "refresh_token",
                "description": "refresh token",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successfully refreshed access token",
                "schema": {
                  "$ref": "#/definitions/auth.oauthRefreshTokenResponseDto"
                }
              },
              "400": {
                "description": "Bad Request",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              },
              "401": {
                "description": "Unauthorized request",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              },
              "500": {
                "description": "Internal Server Error",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              }
            }
          }
        },
        "/urls": {
          "post": {
            "description": "creates a shortened URL for a user",
            "summary": "Creates a short URL for a user",
            "operationId": "createShortUrl",
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "tags": [
              "URL"
            ],
            "security": [
              {
                "ApiKeyAuth": []
              }
            ],
            "parameters": [
              {
                "description": "url request",
                "name": "url",
                "in": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/url.createShortUrlDto"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successfully created shortened url",
                "schema": {
                  "$ref": "#/definitions/url.urlResponseDto"
                }
              },
              "400": {
                "description": "Bad Request",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              },
              "401": {
                "description": "Unauthorized request",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              },
              "422": {
                "description": "Unprocessable entity",
                "schema": {
                  "$ref": "#/definitions/httpError"
                }
              }
            }
          }
        }             
    },
    "definitions": {
      "Date": {
        "type": "string",
        "description": "Date record was updated or created",
        "example": "2022-08-12T17:18:18.553Z"
      },
      "Email": {
        "type": "string",
        "description": "user email",
        "example": "johndoe@example.com"
      },
      "ID": {
        "type": "string",
        "description": "unique id",
        "example": "gciabeoaufbeoaurea"
      },
      "AccessToken": {
        "type": "string",
        "description": "JWT refresh token"
      },
      "RefreshToken": {
        "type": "string",
        "description": "JWT refresh token"
      },
      "TokenType": {
        "type": "string",
        "description": "JWT refresh token",
        "example": "Bearer"
      },
      "OriginalUrl": {
        "type": "string",
        "description": "Original long URL",
        "example": "http://example.com/please/shortenme"
      },
      "CustomAlias": {
        "type": "string",
        "description": "Custom Alias the user provides for the shortening of the URL",
        "example": "shortenme",
        "default": ""
      },
      "Keywords": {
        "type": "array",
        "description": "An array of keywords for the url to shorten",
        "items": {
          "type": "string"
        }
      },
      "ShortCode": {
        "type": "string",
        "description": "short code of the shortened url",
        "example": "gcia"
      },
      "Hits": {
        "type": "integer",
        "description": "number of times the url has been visited",
        "example": 1
      },      
      "httpError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "missing field"
          }
        }
      },
      "auth.registerRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "johndoe@example.com"
          },
          "password": {
            "type": "string",
            "example": "strong password"
          }
        }
      },
      "auth.userResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/ID"
          },
          "email": {
            "$ref": "#/definitions/Email"
          },
          "created_at": {
            "$ref": "#/definitions/Date"
          },
          "updated_at": {
            "$ref": "#/definitions/Date"
          }
        }
      },
      "auth.loginResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/ID"
          },
          "email": {
            "$ref": "#/definitions/Email"
          },
          "created_at": {
            "$ref": "#/definitions/Date"
          },
          "updated_at": {
            "$ref": "#/definitions/Date"
          },
          "access_token": {
            "$ref": "#/definitions/AccessToken"
          },
          "refresh_token": {
            "$ref": "#/definitions/RefreshToken"
          }
        }
      },
      "auth.oauthRefreshTokenResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "$ref": "#/definitions/AccessToken"
          },
          "refresh_token": {
            "$ref": "#/definitions/RefreshToken"
          },
          "token_type": {
            "$ref": "#/definitions/TokenType"
          }
        }
      },
      "url.createShortUrlDto": {
        "type": "object",
        "properties": {
          "original_url": {
            "$ref": "#/definitions/OriginalUrl"
          },
          "custom_alias": {
            "$ref": "#/definitions/CustomAlias"
          },
          "expires_on": {
            "$ref": "#/definitions/Date"
          },
          "keywords": {
            "$ref": "#/definitions/Keywords"
          }
        }
      },
      "url.urlResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/ID"
          },
          "user_id": {
            "$ref": "#/definitions/ID"
          },
          "short_code": {
            "$ref": "#/definitions/ShortCode"
          },
          "created_at": {
            "$ref": "#/definitions/Date"
          },
          "updated_at": {
            "$ref": "#/definitions/Date"
          },
          "original_url": {
            "$ref": "#/definitions/OriginalUrl"
          },
          "custom_alias": {
            "$ref": "#/definitions/CustomAlias"
          },
          "expires_on": {
            "$ref": "#/definitions/Date"
          },
          "keywords": {
            "$ref": "#/definitions/Keywords"
          },
          "hits": {
            "$ref": "#/definitions/Hits"
          }
        }
      }      
    },
    "securityDefinitions": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "JWT Token retrieved from login request or from refreshing a token. Prefix with Bearer"
      }
    }    
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8085",
	BasePath:         "/api/v1/curtz",
	Schemes:          []string{"http", "https"},
	Title:            "Curtz API",
	Description:      "URL Shortener Service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
